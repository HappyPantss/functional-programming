(function (d3) {
    'use strict';
  
    const svg = d3.select('svg');
  
    const width = + svg.attr('width');
    const height = + svg.attr('height');
  
    const render = data => {
      const xValue = d => d.country;
      const yValue = d => d.population;
      const margin = { top: 20, right: 20, bottom: 30, left: 110 };
      const innerWidth = width - margin.left - margin.right;
      const innerHeight = height - margin.top - margin.bottom;
      
        const yScale = d3.scaleLinear()
          .domain([d3.max(data, yValue), 0])
          .range([0, innerHeight]);
      
          const xScale = d3.scaleBand()
            .domain(data.map(xValue))
            .range([0, innerWidth])
            .padding(0.1);  
      
          const g = svg.append('g')
              .attr('transform', `translate(${margin.left},${margin.top})`);
      
          g.append('g').call(d3.axisLeft(yScale));
          g.append('g').call(d3.axisBottom(xScale))
              .attr('transform', `translate(0,${innerHeight})`);
      
        g.selectAll('rect').data(data)
          .enter().append('rect')
            .attr('x', d => xScale(xValue(d)))
            .attr('y', d => yScale(yValue(d)))
            .attr('height', d => innerHeight - yScale(yValue(d)))
            .attr('width', xScale.bandwidth());
    };
  
    // Turning from vertical to horizontal with help from Sam Slotenmaker
  
    d3.csv('data.csv').then(data => {
      data.forEach(d => {
          d.population = + d.population * 1000;
      });
        render(data);
    });
  
  }(d3));
  
  //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFxuICBzZWxlY3QsXG4gIGNzdixcbiAgc2NhbGVMaW5lYXIsXG4gIG1heCxcbiAgc2NhbGVCYW5kLFxuICBheGlzTGVmdCxcbiAgYXhpc0JvdHRvbVxuIH0gZnJvbSAnZDMnXG5cbmNvbnN0IHN2ZyA9IHNlbGVjdCgnc3ZnJyk7XG5cbmNvbnN0IHdpZHRoID0gKyBzdmcuYXR0cignd2lkdGgnKTtcbmNvbnN0IGhlaWdodCA9ICsgc3ZnLmF0dHIoJ2hlaWdodCcpO1xuXG5jb25zdCByZW5kZXIgPSBkYXRhID0+IHtcbiAgY29uc3QgeFZhbHVlID0gZCA9PiBkLmNvdW50cnk7XG4gIGNvbnN0IHlWYWx1ZSA9IGQgPT4gZC5wb3B1bGF0aW9uO1xuICBjb25zdCBtYXJnaW4gPSB7IHRvcDogMjAsIHJpZ2h0OiAyMCwgYm90dG9tOiAzMCwgbGVmdDogMTEwIH07XG4gIGNvbnN0IGlubmVyV2lkdGggPSB3aWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0O1xuICBjb25zdCBpbm5lckhlaWdodCA9IGhlaWdodCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tO1xuICBcbiAgICBjb25zdCB5U2NhbGUgPSBzY2FsZUxpbmVhcigpXG4gICAgICAuZG9tYWluKFttYXgoZGF0YSwgeVZhbHVlKSwgMF0pXG4gICAgICAucmFuZ2UoWzAsIGlubmVySGVpZ2h0XSk7XG4gIFxuICBcdGNvbnN0IHhTY2FsZSA9IHNjYWxlQmFuZCgpXG4gICAgXHQuZG9tYWluKGRhdGEubWFwKHhWYWx1ZSkpXG4gICAgXHQucmFuZ2UoWzAsIGlubmVyV2lkdGhdKVxuICAgIFx0LnBhZGRpbmcoMC4xKTsgIFxuICBcbiAgXHRjb25zdCBnID0gc3ZnLmFwcGVuZCgnZycpXG4gIFx0XHQuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke21hcmdpbi5sZWZ0fSwke21hcmdpbi50b3B9KWApO1xuICBcbiAgXHRnLmFwcGVuZCgnZycpLmNhbGwoYXhpc0xlZnQoeVNjYWxlKSk7XG4gIFx0Zy5hcHBlbmQoJ2cnKS5jYWxsKGF4aXNCb3R0b20oeFNjYWxlKSlcbiAgXHRcdC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKDAsJHtpbm5lckhlaWdodH0pYCk7XG4gIFxuICAgIGcuc2VsZWN0QWxsKCdyZWN0JykuZGF0YShkYXRhKVxuICAgICAgLmVudGVyKCkuYXBwZW5kKCdyZWN0JylcbiAgICAgICAgLmF0dHIoJ3gnLCBkID0+IHhTY2FsZSh4VmFsdWUoZCkpKVxuICAgICAgICAuYXR0cigneScsIGQgPT4geVNjYWxlKHlWYWx1ZShkKSkpXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBkID0+IGlubmVySGVpZ2h0IC0geVNjYWxlKHlWYWx1ZShkKSkpXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIHhTY2FsZS5iYW5kd2lkdGgoKSlcbn07XG5cbi8vIFR1cm5pbmcgZnJvbSB2ZXJ0aWNhbCB0byBob3Jpem9udGFsIHdpdGggaGVscCBmcm9tIFNhbSBTbG90ZW5tYWtlclxuXG5jc3YoJ2RhdGEuY3N2JykudGhlbihkYXRhID0+IHtcbiAgZGF0YS5mb3JFYWNoKGQgPT4ge1xuICBcdGQucG9wdWxhdGlvbiA9ICsgZC5wb3B1bGF0aW9uICogMTAwMDtcbiAgfSk7XG5cdHJlbmRlcihkYXRhKTtcbn0pIl0sIm5hbWVzIjpbInNlbGVjdCIsInNjYWxlTGluZWFyIiwibWF4Iiwic2NhbGVCYW5kIiwiYXhpc0xlZnQiLCJheGlzQm90dG9tIiwiY3N2Il0sIm1hcHBpbmdzIjoiOzs7RUFVQSxNQUFNLEdBQUcsR0FBR0EsU0FBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFCO0VBQ0EsTUFBTSxLQUFLLEdBQUcsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0VBQ2xDLE1BQU0sTUFBTSxHQUFHLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztB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