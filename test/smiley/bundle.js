(function (d3) {
  'use strict';

  const svg = d3.select('svg');


  const width = +svg.attr('width');
  // const width = parseFloat(svg.attr('width'));
  const height = +svg.attr('height');

  const g = svg.append('g')
  	.attr('transform', `translate(${width / 2}, ${height / 2})`);

  const circle = g.append('circle')
    .attr('r', height / 2)
  	.attr('fill', 'yellow')
  	.attr('stroke', 'black');

  const eyeSpacing = 100;
  const eyeYOffSet = -70;
  const eyeRadius = 40;
  const eyebrowWidth = 70;
  const eyebrowHeight = 15;
  const eyebrowYOffset = -70;

  const eyesG = g
  	.append('g')
      .attr('transform', `translate(0, ${eyeYOffSet})`);
  const leftEye = eyesG
  	.append('circle')
      .attr('r', eyeRadius)
      .attr('cx', - eyeSpacing);

  const rightEye = eyesG
  	.append('circle')
      .attr('r', eyeRadius)
      .attr('cx', + eyeSpacing);

  const eyebrowsG = eyesG
  	.append('g')
    	.attr('transform', `translate(0, ${eyebrowYOffset})`);

  eyebrowsG
  	.transition().duration(2000)
  		.attr('transform', `translate(0, ${eyebrowYOffset - 50})`)
  	.transition().duration(2000)
  		.attr('transform', `translate(0, ${eyebrowYOffset})`);

  const leftEyebrow = eyebrowsG
  	.append('rect')
      .attr('x', - eyeSpacing - eyebrowWidth / 2)
      .attr('width', eyebrowWidth)
      .attr('height', eyebrowHeight);

  const rightEyebrow = eyebrowsG
  	.append('rect')
      .attr('x', eyeSpacing - eyebrowWidth / 2)
      .attr('width', eyebrowWidth)
      .attr('height', eyebrowHeight);

  const mouth = g
  	.append('path')
      .attr('d', d3.arc()({
        innerRadius: 150,
        outerRadius: 170,
        startAngle: Math.PI / 2,
        endAngle: Math.PI * 3 / 2
  		}));

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNlbGVjdCwgYXJjIH0gZnJvbSAnZDMnXG5cbmNvbnN0IHN2ZyA9IHNlbGVjdCgnc3ZnJyk7XG5cblxuY29uc3Qgd2lkdGggPSArc3ZnLmF0dHIoJ3dpZHRoJyk7XG4vLyBjb25zdCB3aWR0aCA9IHBhcnNlRmxvYXQoc3ZnLmF0dHIoJ3dpZHRoJykpO1xuY29uc3QgaGVpZ2h0ID0gK3N2Zy5hdHRyKCdoZWlnaHQnKTtcblxuY29uc3QgZyA9IHN2Zy5hcHBlbmQoJ2cnKVxuXHQuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke3dpZHRoIC8gMn0sICR7aGVpZ2h0IC8gMn0pYCk7XG5cbmNvbnN0IGNpcmNsZSA9IGcuYXBwZW5kKCdjaXJjbGUnKVxuICAuYXR0cigncicsIGhlaWdodCAvIDIpXG5cdC5hdHRyKCdmaWxsJywgJ3llbGxvdycpXG5cdC5hdHRyKCdzdHJva2UnLCAnYmxhY2snKTtcblxuY29uc3QgZXllU3BhY2luZyA9IDEwMDtcbmNvbnN0IGV5ZVlPZmZTZXQgPSAtNzA7XG5jb25zdCBleWVSYWRpdXMgPSA0MDtcbmNvbnN0IGV5ZWJyb3dXaWR0aCA9IDcwO1xuY29uc3QgZXllYnJvd0hlaWdodCA9IDE1O1xuY29uc3QgZXllYnJvd1lPZmZzZXQgPSAtNzA7XG5cbmNvbnN0IGV5ZXNHID0gZ1xuXHQuYXBwZW5kKCdnJylcbiAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgwLCAke2V5ZVlPZmZTZXR9KWApOztcblxuY29uc3QgbGVmdEV5ZSA9IGV5ZXNHXG5cdC5hcHBlbmQoJ2NpcmNsZScpXG4gICAgLmF0dHIoJ3InLCBleWVSYWRpdXMpXG4gICAgLmF0dHIoJ2N4JywgLSBleWVTcGFjaW5nKTtcblxuY29uc3QgcmlnaHRFeWUgPSBleWVzR1xuXHQuYXBwZW5kKCdjaXJjbGUnKVxuICAgIC5hdHRyKCdyJywgZXllUmFkaXVzKVxuICAgIC5hdHRyKCdjeCcsICsgZXllU3BhY2luZyk7XG5cbmNvbnN0IGV5ZWJyb3dzRyA9IGV5ZXNHXG5cdC5hcHBlbmQoJ2cnKVxuICBcdC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKDAsICR7ZXllYnJvd1lPZmZzZXR9KWApO1xuXG5leWVicm93c0dcblx0LnRyYW5zaXRpb24oKS5kdXJhdGlvbigyMDAwKVxuXHRcdC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKDAsICR7ZXllYnJvd1lPZmZzZXQgLSA1MH0pYClcblx0LnRyYW5zaXRpb24oKS5kdXJhdGlvbigyMDAwKVxuXHRcdC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKDAsICR7ZXllYnJvd1lPZmZzZXR9KWApO1xuXG5jb25zdCBsZWZ0RXllYnJvdyA9IGV5ZWJyb3dzR1xuXHQuYXBwZW5kKCdyZWN0JylcbiAgICAuYXR0cigneCcsIC0gZXllU3BhY2luZyAtIGV5ZWJyb3dXaWR0aCAvIDIpXG4gICAgLmF0dHIoJ3dpZHRoJywgZXllYnJvd1dpZHRoKVxuICAgIC5hdHRyKCdoZWlnaHQnLCBleWVicm93SGVpZ2h0KTtcblxuY29uc3QgcmlnaHRFeWVicm93ID0gZXllYnJvd3NHXG5cdC5hcHBlbmQoJ3JlY3QnKVxuICAgIC5hdHRyKCd4JywgZXllU3BhY2luZyAtIGV5ZWJyb3dXaWR0aCAvIDIpXG4gICAgLmF0dHIoJ3dpZHRoJywgZXllYnJvd1dpZHRoKVxuICAgIC5hdHRyKCdoZWlnaHQnLCBleWVicm93SGVpZ2h0KTtcblxuY29uc3QgbW91dGggPSBnXG5cdC5hcHBlbmQoJ3BhdGgnKVxuICAgIC5hdHRyKCdkJywgYXJjKCkoe1xuICAgICAgaW5uZXJSYWRpdXM6IDE1MCxcbiAgICAgIG91dGVyUmFkaXVzOiAxNzAsXG4gICAgICBzdGFydEFuZ2xlOiBNYXRoLlBJIC8gMixcbiAgICAgIGVuZEFuZ2xlOiBNYXRoLlBJICogMyAvIDJcblx0XHR9KSk7Il0sIm5hbWVzIjpbInNlbGVjdCIsImFyYyJdLCJtYXBw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YUFBYSxDQUFDLENBQUM7QUFDbkM7RUFDQSxNQUFNLFlBQVksR0FBRyxTQUFTO0VBQzlCLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQztFQUNoQixLQUFLLElBQUksQ0FBQyxHQUFHLEVBQUUsVUFBVSxHQUFHLFlBQVksR0FBRyxDQUFDLENBQUM7RUFDN0MsS0FBSyxJQUFJLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQztFQUNoQyxLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFDbkM7RUFDQSxNQUFNLEtBQUssR0FBRyxDQUFDO0VBQ2YsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDO0VBQ2hCLEtBQUssSUFBSSxDQUFDLEdBQUcsRUFBRUMsTUFBRyxFQUFFLENBQUM7RUFDckIsTUFBTSxXQUFXLEVBQUUsR0FBRztFQUN0QixNQUFNLFdBQVcsRUFBRSxHQUFHO0VBQ3RCLE1BQU0sVUFBVSxFQUFFLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQztFQUM3QixNQUFNLFFBQVEsRUFBRSxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDO0VBQy9CLEdBQUcsQ0FBQyxDQUFDOzs7OyJ9